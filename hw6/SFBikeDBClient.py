#DB DRIVER CLASS
import logging
import psycopg2 as pg
from HWUtils import RecordNotFound
from HWUtils import DBVars
import csv

logger= logging.getLogger('sfbikedb')
TYPES = ['most_popular_station_id','most_popular_bike_id',
         'ride_count_having_duration_between','ride_count_users_born']


def fill_with_na(u):
    result=[]
    for element in u:
        if element!="":
            result.append(element)
        else:
            result.append(None)
    return result

# IMPLEMENT THESE FUNCTIONS
class Client:
    def __init__(self, override=False, user_name=None, batch_load=1):
        # you add class variables here like
        # self.myvar="the greatest variable ever. the best"
        self.dbname = "fhalamos" 
        self.dbhost = "127.0.0.1"
        self.dbport = 5432
        self.dbusername = "fhalamos"
        self.dbpasswd = "" # You should not use
        self.batch_load = batch_load
        if user_name:
            self.dbname=user_name
            self.username=user_name
            logger.info("Overriding DB name and user to be %s" % user_name)

        self.conn=None #Connection to DBs

        # for grading do not modify
        if override:
            logger.info("Overriding DB connection params")
            self.dbname = DBVars.dbname
            self.dbhost = DBVars.dbhost
            self.dbport = DBVars.dbport
            self.dbusername = DBVars.dbusername
            self.dbpasswd = DBVars.dbpasswd

        pass

    # open a connection to a psql database, using the self.dbXX parameters
    def open_connection(self):
        logger.debug("Opening a Connection")
        self.conn = pg.connect(dbname=self.dbname, user=self.dbusername)
        return True

    # Close any active connection to the database
    # This should be able to handle closing a closed conn)
    def close_connection(self):
        logger.debug("Closing Connection")

        #Avoiding trying to close a closed connection
        if(self.conn.closed==0):
          self.conn.close()

        return True


    # Create any tables needed by this Client. Drop table if exists first.
    def create_tables(self):
        logger.debug("Creating Tables")
        
        # return False # Used when debugging so as not to load everything again

        #Creating cursor for executing sql commands
        cur = self.conn.cursor()

        #Drop tables if exist
        cur.execute("DROP TABLE IF EXISTS trip;")
        cur.execute("DROP TABLE IF EXISTS station;")
        cur.execute("DROP TABLE IF EXISTS sfbike_user;")
      

        #Create table Station
        cur.execute("""
          CREATE TABLE station (id integer PRIMARY KEY,
                                name varchar,
                                latitude varchar,
                                longitude varchar);""")


        #Create table User. According to standard, "User" is a bad name for tables in sql, so using sfbike_user
        cur.execute("""
          CREATE TABLE sfbike_user (id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                    user_type varchar,
                                    year_of_birth integer,
                                    gender varchar);""")

        #Creating table Trip
        cur.execute("""
          CREATE TABLE trip ( id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
                              trip_duration integer,
                              start_time_and_date TIMESTAMP,
                              end_time_and_date TIMESTAMP,
                              start_station_id integer,
                              end_station_id integer,
                              bike_id integer,
                              user_id integer,
                              FOREIGN KEY(start_station_id) REFERENCES station(id),
                              FOREIGN KEY(end_station_id) REFERENCES station(id),
                              FOREIGN KEY(user_id) REFERENCES sfbike_user(id));""")

        #Make changes persistent in db
        self.conn.commit()
        cur.close()

        return False

    # Add at least two indexes to the tables to improve analytic queries.
    def add_indexes(self):
        logger.debug("Adding Indexes")
        cur = self.conn.cursor()

        cur.execute("""CREATE INDEX ON trip (end_station_id);""")
        cur.execute("""CREATE INDEX ON trip (start_station_id);""")
        cur.execute("""CREATE INDEX ON trip (user_id);""")

        self.conn.commit()
        cur.close()
        return False

    ''' **************************
    ******* LOAD DATA FUNCITONS **
    *************************** '''
    
    def load_record(self, line):

        #A lot of code in this method is copied from bulk. Would be great to modularize them so as to avoid repeated code. No time for the moment.

        logger.debug(line)

        line_array = line.split(',')
        trip_duration = line_array[0].strip().replace('"','')
        start_time_and_date = line_array[1].strip().replace('"','')
        end_time_and_date = line_array[2].strip().replace('"','')
        start_station_id = line_array[3].strip().replace('"','')
        start_station_name = line_array[4].strip().replace('"','')
        start_station_latitude = line_array[5].strip().replace('"','')
        start_station_longitude = line_array[6].strip().replace('"','')
        end_station_id = line_array[7].strip().replace('"','')
        end_station_name = line_array[8].strip().replace('"','')
        end_station_latitude = line_array[9].strip().replace('"','')
        end_station_longitude = line_array[10].strip().replace('"','')
        bike_id = line_array[11].strip().replace('"','')
        user_type = line_array[12].strip().replace('"','')

        #birth year and gender comes with blank spaces, brakets and space jumps, clean it
        member_birth_year = line_array[13].strip().replace('"','') if line_array[13].strip().replace('"','')!="" else None 
        member_gender = line_array[14].strip().replace('"','') if line_array[14].strip().replace('"','')!="" else None 


        #Avoid header
        if(trip_duration=='duration_sec'):
            return False

        cur = self.conn.cursor()

        #Insert start_station

        #check if records not alreay in table        
        cur.execute("""
          SELECT id 
          FROM station
          WHERE id = %s
                and name = %s
                and latitude = %s
                and longitude = %s;""", (start_station_id, start_station_name, start_station_latitude, start_station_longitude)
        )
        #Get results. 
        station_already_in_table = cur.fetchone()
        
        if(station_already_in_table is None):
            #Insert station
            cur.execute("""
                    INSERT INTO station (id, name, latitude, longitude)
                    VALUES (%s, %s, %s, %s);""",
                    (start_station_id,start_station_name,start_station_latitude, start_station_longitude)
            )

        #Insert end_station

        #check if records not alreay in table        
        cur.execute("""
          SELECT id 
          FROM station
          WHERE id = %s
                and name = %s
                and latitude = %s
                and longitude = %s;""", (end_station_id, end_station_name, end_station_latitude, end_station_longitude)
        )
        #Get results. 
        station_already_in_table = cur.fetchone()
        
        if(station_already_in_table is None):
            #Insert station
            cur.execute("""
                    INSERT INTO station (id, name, latitude, longitude)
                    VALUES (%s, %s, %s, %s);""",
                    (end_station_id, end_station_name,end_station_latitude, end_station_longitude)
            )


        #Insert user

        #check if records not alreay in table       
        #Query according to availability of birth year and member_gender
        if(user_type and member_birth_year and member_gender):                
            cur.execute("""
              SELECT id 
              FROM sfbike_user
              WHERE user_type = %s
                    and year_of_birth = %s
                    and gender = %s;""", (user_type, member_birth_year, member_gender)
            )
        elif(user_type and member_gender and member_birth_year is None):
            cur.execute("""
              SELECT id 
              FROM sfbike_user
              WHERE user_type = %s
              and gender = %s
              and year_of_birth IS NULL;""", (user_type, member_gender)
            )
        elif(user_type and member_gender is None and member_birth_year is None):
            cur.execute("""
              SELECT id 
              FROM sfbike_user
              WHERE user_type = %s
              and gender IS NULL
              and year_of_birth IS NULL;""", (user_type,)
            )

        #Get results. 
        user_already_in_table = cur.fetchone()
        
        if(user_already_in_table is None):
            #Insert user
            cur.execute("""
                    INSERT INTO sfbike_user (user_type, year_of_birth, gender)
                    VALUES (%s, %s, %s);""",
                    (user_type, member_birth_year, member_gender)
            )




        #Insert trip (we assume uniqueness of trips, so no need to check if they are already in the trip table)

        #Obtain user_id
        #Query according to availability of birth year and member_gender
        if(user_type and member_birth_year and member_gender):                
            cur.execute("""
              SELECT id 
              FROM sfbike_user
              WHERE user_type = %s
                    and year_of_birth = %s
                    and gender = %s;""", (user_type, member_birth_year, member_gender)
            )
        elif(user_type and member_gender and member_birth_year is None):
            cur.execute("""
              SELECT id 
              FROM sfbike_user
              WHERE user_type = %s
              and gender = %s
              and year_of_birth IS NULL;""", (user_type, member_gender)
            )
        elif(user_type and member_gender is None and member_birth_year is None):
            cur.execute("""
              SELECT id 
              FROM sfbike_user
              WHERE user_type = %s
              and gender IS NULL
              and year_of_birth IS NULL;""", (user_type,)
            )

        #Get results. 
        user_id = cur.fetchone()

        #Create one vector with all the info to insert in table
        trip_info =  [trip_duration,
              start_time_and_date, 
              end_time_and_date,
              start_station_id,
              end_station_id,
              bike_id,
              user_id]

        #Fill empty values with Nones
        trip_info = fill_with_na(trip_info)

        #Insert results in trips table
        trips_insert_query = """
            INSERT INTO trip
              (trip_duration,
              start_time_and_date, 
              end_time_and_date,
              start_station_id,
              end_station_id,
              bike_id,
              user_id)
             VALUES (%s, %s, %s, %s, %s, %s, %s)"""

        #Insert values in table
        cur.execute(trips_insert_query, trip_info)

        self.conn.commit()
        cur.close()
        return False


    ''' ***************
    ***  BULK LOAD 
    *******************
    This function will bulk load the data using copy
    '''
    def bulk_load_file(self, file_path):
        logger.debug("Bulk load file from %s" % file_path)
      
        cur = self.conn.cursor()

        #Create temporal table to load csv
        cur.execute("""
          CREATE TABLE temp (duration_sec varchar,
                            start_time varchar,
                            end_time varchar,
                            start_station_id varchar,
                            start_station_name varchar,
                            start_station_latitude varchar,
                            start_station_longitude varchar,
                            end_station_id varchar,
                            end_station_name varchar,
                            end_station_latitude varchar,
                            end_station_longitude varchar,
                            bike_id varchar,
                            user_type varchar,
                            member_birth_year varchar,
                            member_gender varchar);""")

        #Loading csv to temp table
        f = open(file_path, 'r')
        reader = csv.reader(f, delimiter=',', quotechar='"')

        next(reader) # Skip the header row.

        copy_sql = """
           COPY temp FROM stdin WITH CSV HEADER
           DELIMITER as ','
           """
        cur.copy_expert(sql=copy_sql, file=f)


        #Insert stations          
        stations_insert_query = """
          INSERT INTO station      
            SELECT distinct CAST(start_station_id AS INT), start_station_name, start_station_latitude, start_station_longitude
            FROM temp
            UNION
            SELECT distinct CAST(end_station_id AS INT), end_station_name, end_station_latitude, end_station_longitude
            FROM temp;
          """

        cur.execute(stations_insert_query)


        #Query users info        
        users_insert_query = """
          INSERT INTO sfbike_user (user_type, year_of_birth, gender)
            SELECT distinct user_type, CAST(nullif(member_birth_year, '') AS INT), nullif(member_gender, '')
            FROM temp;
          """ 

        cur.execute(users_insert_query)



        #Query trips info        
        cur.execute("""
          SELECT distinct 
            duration_sec,
            start_time,
            end_time,
            start_station_id,
            end_station_id,
            bike_id,
            user_type,
            member_birth_year,
            member_gender
          FROM temp;
          """) 

        #Get results
        trips = cur.fetchall()


        #Insert results in trips table
        trips_insert_query = """
            INSERT INTO trip
              (trip_duration,
              start_time_and_date, 
              end_time_and_date,
              start_station_id,
              end_station_id,
              bike_id,
              user_id)
             VALUES (%s, %s, %s, %s, %s, %s, %s)"""

        for trip in trips:

            #Info in indices 0 to 6 go to the table
            trip_info = [trip[index] for index in range(0,6)]


            #Info in index 6 to 8 used to obtain user_id
            user_type = trip[6]
            member_birth_year = trip[7] if trip[7]!="" else None 
            member_gender = trip[8] if trip[8]!="" else None

            #Obtain user_id
            #Query according to availability of birth year and member_gender
            if(user_type and member_birth_year and member_gender):                
                cur.execute("""
                  SELECT id 
                  FROM sfbike_user
                  WHERE user_type = %s
                        and year_of_birth = %s
                        and gender = %s;""", (user_type, member_birth_year, member_gender)
                )
            elif(user_type and member_gender and member_birth_year is None):
                cur.execute("""
                  SELECT id 
                  FROM sfbike_user
                  WHERE user_type = %s
                  and gender = %s
                  and year_of_birth IS NULL;""", (user_type, member_gender)
                )
            elif(user_type and member_gender is None and member_birth_year is None):
                cur.execute("""
                  SELECT id 
                  FROM sfbike_user
                  WHERE user_type = %s
                  and gender IS NULL
                  and year_of_birth IS NULL;""", (user_type,)
                )

            #Get results. 
            user_id = cur.fetchone()
            
            #Create one vector with all the info to insert in table
            trip_info =  list(trip_info) + [user_id]

            #Fill empty values with Nones
            trip_info = fill_with_na(trip_info)

            #Insert values in table
            cur.execute(trips_insert_query, trip_info)


        #Drop temporal table. 
        cur.execute("DROP TABLE temp;")

        self.conn.commit()
        cur.close()

        return False

    ''' *****************************
    ******* ANALYZE DATA FUNCITONS **
    ***************************** '''
    # Return the query, dictated by the op, param1, and optionally param2
    def query_db(self, op, param1, param2=None):

        logger.debug("%s %s-%s" % (op,param1, param2))
        
        cur = self.conn.cursor()    

        if op == 'most_popular_station_id':
            # find the most popular station id(s) that has rides starting and 
            # ending between datetime ranges param1 and param2

            cur.execute("""
              
              SELECT start_station_id
              FROM trip
              WHERE start_time_and_date>%s
              and end_time_and_date<%s
              GROUP BY start_station_id
              HAVING count(ID) = (
                SELECT count(ID) as cnts
                FROM trip
                WHERE start_time_and_date>%s and end_time_and_date<%s
                GROUP BY start_station_id
                ORDER BY cnts DESC
                LIMIT 1
              ) 
            ;""", (param1, param2,param1, param2)
            )

            # print("Printing results of query:")
            # print(cur.fetchall())

        elif op == 'most_popular_bike_id':
            # find the most popular bike id(s) that has rides starting (only) 
            # between datetime ranges param1 and param2
          
            cur.execute("""
              SELECT bike_id
              FROM trip 
              WHERE start_time_and_date BETWEEN %s AND %s
              GROUP BY bike_id
              HAVING count(id) = (
                SELECT count(id)
                FROM trip 
                WHERE start_time_and_date BETWEEN %s AND %s
                GROUP BY bike_id
                ORDER BY count(id) desc 
                LIMIT 1
              )
            ;""", (param1, param2,param1, param2)
            )

            # print("Printing results of query:")
            # print(cur.fetchall())
            
        elif op == 'ride_count_having_duration_between':
            # find the number of rides that have duration between param1 
            # and param2
            
            cur.execute("""SELECT count(id) as number_of_rides 
            FROM trip 
            WHERE trip_duration BETWEEN %s AND %s
            ;""", (param1, param2)
            )

            # print("Printing results of query:")
            # print(cur.fetchall())
        
        elif op == 'ride_count_users_born':
            # find the number of rides by users born in param1
           
            cur.execute("""SELECT count(t.id) as number_of_rides 
            FROM trip as t
            INNER JOIN sfbike_user as u
            ON t.user_id = u.id
            WHERE u.year_of_birth = %s 
            ;""", (param1,)
            )

            # print("Printing results of queryyy:")
            # print(cur.fetchall())

        cur.close()   
        return False

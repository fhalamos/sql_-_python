To finalize our assignment, we analyzed the log file resulting from running the test.sh over the trip.csv file. We found the following results:
 
For the data loading tests we can observe that the bulk loading is way faster than loading with different batch sizes. We observed that if we load a bulk we need to spend about 346.111ms. When loading using groups of between one and a thousand records it takes 1ms per record for most of the records, thus, since we have 832,603 records, the time consumed by these loading methods are way more expensive than bulk. Furthermore, we can not distinguish differences in loading times between the batch sizes set: the latency percentiles reported in the log file show that for 95% of the records the time invested to load one record was 1ms or less. Moreover, for the 99th percentile it took between 2ms, for all batch sizes. Finally, for the 100th percentiles we observe that it took between 103ms and 104ms depending on the batch size. This last percentile is understood as the worst-case scenario of the performance of each type of loading, so, even if it might show an important indicator of performance, it's interpretation would be more interesting if observer for several runs.
  
We now compare loading times when creating index before or after the data is loaded. We observe that, if creating index after data is loaded, the loading time speeds up. In addition, the cost of creating the indexes after load is not as high as the difference gained with loading data before index creation. Thus, creating the indexes after loading is more efficient. This is aligned to what we expected: indexes are helpful for look-ups, but they might make harder or increase cost of loading new data. This conclusion is clearly observable for the bulk loading - because we know the total time dedicated to loading in each case-, but it can't be easily observed for the other loading methods, since the average latency metric is not presented. Nevertheless, since the latency percentiles are shown, we are pretty sure that the time spent loading when the indexes were created after loading data was less than compared to the previous scenario (loading data after index creation).
 
On the other hand, when we analyze the usefulness of the indexes for the look-ups, we observe that the performance of all four queries was improved when the indexes were created, resulting in faster look-ups. Hence, we obtain empirical evidence of the utility of index in query performance.

